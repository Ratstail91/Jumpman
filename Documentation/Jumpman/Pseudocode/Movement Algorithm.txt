movement algorithm, v4

Determine the correct action to take depending on the type of collision:
	If the character lands on a platform, the character should stand on that platform.
	If the character lands on the side of a platform, the character should keep falling,
	 but not through the platform's side.
	If the character collides with the bottom of a platform, then the character should
	 stop accelerating upwards, and fall back down.
	If the character walks off of a platform, the character should start falling again.
	
	Forgive my defensive programming.
end

-------------------------

preprocessor:
	JUMP		= .35
	FALL		= .35
	MOVE		= .20
	ACCELERATE	= .001
end

-------------------------
collision_side.h
-------------------------

//simple enough

enum Direction:
	NONE = 0
	ABOVE
	BELOW
	LEFT
	RIGHT
end

Direction CheckCollisionSide	(myBox, otherBox)
Direction CheckCollisionAbove	(myBox, otherBox)
Direction CheckCollisionBelow	(myBox, otherBox)
Direction CheckCollisionLeft	(myBox, otherBox)
Direction CheckCollisionRight	(myBox, otherBox)

-------------------------

Scene::VerticalControl(Player, Wall):
	//freefall control
	
	if (motionY > 0 && collision below):
		//landing on a platform
		stop fall
		snap to the platform
	else if (motionY < 0 && collision above):
		//hitting a platform above
		stop fall
		snap to the platform (bottom)
		start fall
	else if (motion != 0):
		//freefall
		if (motionY >= FALL):
			motionY = FALL
		else
			motionY += ACCELERATE
		end
	else if (motionY == 0 && no collision below)
		motionY += ACCELERATE
	end
end


Scene::HorizontalControl(Player, Wall):
	if (motionX < 0 && collision on the left):
		stop motion
		snap to the right of the platform
	end
	
	if (motionY > 0 && collision on the right):
		stop motion
		snap to the left of the platform
	end
end


Scene::Update():
	for each wall:
		VerticalControl(player, wall)
		HorizontalControl(player, wall)
	end
	
	//updates
	CalcDeltaTime()
	player.Update(GetDeltaTime())
end
